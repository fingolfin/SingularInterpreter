ring r;

poly p = x^2+y;
ideal id = (x, y^2+y);
intvec iv = 1, 2;
intmat im[2][2] = 1, 2, 3, 4;

// betti (TODO: more testing)
intmat im_betti[2][2] = 1, 1, 0, 1;
intmat im_betti2[2][3] = 1, 1, 1, 0, 1, 0;
ASSUME(0, betti(id) == im_betti);
ASSUME(0, betti(id, 3) == im_betti);
ASSUME(0, betti(list(id)) == im_betti);
ASSUME(0, betti(list(id), 3) == im_betti);
ASSUME(0, betti(list(id, id)) == im_betti2);
ASSUME(0, betti(list(id, id), 3) == im_betti2);


// lead
ASSUME(0, lead(p) == x^2);
ASSUME(0, p == x^2+y); // p not mutated
ASSUME(0, lead(x^2+y^3) == y^3);
ASSUME(0, lead((x^2+1, y+y^3)) == (x^2, y^3));

ideal idlead = lead(id);
ASSUME(0, idlead[1] == x);
ASSUME(0, idlead[2] == y^2);

// rvar
ASSUME(0, rvar(p) == 0);
ASSUME(0, rvar(x) == 1);
ASSUME(0, rvar(y) == 2);
ASSUME(0, rvar(z) == 3);
ASSUME(0, rvar((x^2, y, x)) == (0, 2, 1));
ASSUME(0, rvar(id) == 0);
ASSUME(0, rvar(r) == 0);
ASSUME(0, rvar("x") == 1);
ASSUME(0, rvar("xy") == 0);
ASSUME(0, rvar((x, "y")) == (1, 2));

// transpose
intmat ivt[1][2] = 1, 2;
intmat imt[2][2] = 1, 3, 2, 4;

ASSUME(0, transpose(iv) == ivt);
ASSUME(0, transpose(im) == imt);

// primefactors
ring r0 = 0,x,lp;
list pf = primefactors(number(369));
ASSUME(0, pf == list(list(3, 41), list(2, 1), 1));
pf = primefactors(bigint(369));
ASSUME(0, pf == list(list(3, 41), list(2, 1), 1));
pf = primefactors(369);
ASSUME(0, pf == list(list(3, 41), list(2, 1), 1));
pf = primefactors(36893488147419103363);
ASSUME(0, pf == list(list(36893488147419103363), list(1), 1));
ASSUME(0, typeof(pf[1][1]) == "bigint");

// factorize
setring r;
p = x^3+x^2*y-x*y^2-y^3;
list lf = factorize(p);
// ASSUME(0, lf == list(ideal(1, x-y, x+y), intvec(1, 1, 2)));
ASSUME(0, size(lf) == 2);
def lf1 = lf[1];
def lf2 = lf[2];
ASSUME(0, typeof(lf1) == "ideal");
ASSUME(0, size(lf1) == 3);
ASSUME(0, list(lf1[1], lf1[2], lf1[3]) == list(1, x-y, x+y));
ASSUME(0, typeof(lf2) == "intvec");
ASSUME(0, lf2 == intvec(1, 1, 2));

ASSUME(0, typeof(factorize(p, 0)) == "list");
ASSUME(0, typeof(factorize(p, 1)) == "ideal");
ASSUME(0, typeof(factorize(p, 2)) == "list");
ASSUME(0, typeof(factorize(p, 3)) == "poly");
ASSUME(0, factorize(p, 3) == x^2-y^2);

// chinrem
ASSUME(0, chinrem(intvec(2,-3),intvec(7,11)) == 30);
ASSUME(0, chinrem(list(2, -3), intvec(7, 11)) == 30);
ASSUME(0, chinrem(list(2, -3), list(7, 11)) == 30);

// extgcd
ASSUME(0, extgcd(x^2+x+1, x) == list(1, 1, -x-1));
ASSUME(0, extgcd(x, x) == list(x, 0, 1));

// farey

setring(r0); // doesn't work with any ring
ASSUME(0, farey(2,32003) == 2);
ASSUME(0, typeof(farey(2,32003)) == "number");
list lfarey = farey(list(2, 3), 32003);
ASSUME(0, lfarey == list(2, 3));
ASSUME(0, typeof(lfarey[1]) == "number");
ASSUME(0, typeof(lfarey[2]) == "number");

// random
def randmat = random(2, 3, 4);
ASSUME(0, typeof(randmat) == "intmat");
ASSUME(0, size(randmat) == 12);
ASSUME(0, ncols(randmat) == 4);

// vandermonde
// example from the docs
kill r;
ring r=0,(x,y),dp;
ideal p=2,3;
ideal v=1,2,3,4,5,6,7,8,9;
poly ip=vandermonde(p,v,2);
ASSUME(0, ip[1..5] == -1/9797760*x^2*y^2-595/85536*x^2*y+55/396576*x*y^2+935/384*x^2-1309/3240*x*y);

// division, reduce
// (totally dummy examples, like many others here, just to check that the function call works)
kill r;
ring r=0,(x,y),dp;
poly p = x*y^2;
ideal i = std(ideal(x+y^3, y-x));

// NOTE: this will show a warning "** _ is no standard basis" as long as attributes are not implemented
// TODO: remove this comment when attributes are implemented!
def redres = reduce(p, i, 2, 1..3);
ASSUME(0, typeof(redres) == "poly");
ASSUME(0, redres == -y);

def divres = division(i, i, 2, 1..3);
ASSUME(0, typeof(divres) == "list");
ASSUME(0, typeof(divres[1]) == "matrix");
ASSUME(0, typeof(divres[2]) == "ideal");
