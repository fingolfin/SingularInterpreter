ring r = 0, (x(intvec(1,3,5))(intvec(2,4,6)), y, z), dp; r;
list l = list(typeof(x(intvec(1))(intvec(2,4))));
ASSUME(0, size(l) == 2);
ASSUME(0, l[1] == "poly");
ASSUME(0, l[2] == "poly");

// int

int i = 1;

ASSUME(0, i == 1);
ASSUME(0, 1 == i);
ASSUME(0, i != 2);
ASSUME(0, 2 != i);

ASSUME(0, !0 == 1);
ASSUME(0, !1 == 0);
ASSUME(0, !2 == 0);
ASSUME(0, ! 0 == 1);
ASSUME(0, ! 1 == 0);
ASSUME(0, ! 2 == 0);
ASSUME(0, not 0 == 1);
ASSUME(0, not 1 == 0);
ASSUME(0, not 2 == 0);

ASSUME(0, (0 && 0) == 0);
ASSUME(0, (1 && 0) == 0);
ASSUME(0, (2 && 0) == 0);
ASSUME(0, (0 && 1) == 0);
ASSUME(0, (0 && 2) == 0);
ASSUME(0, (1 && 1) == 1);
ASSUME(0, (2 && 2) == 1);
ASSUME(0, (0 and 1) == 0);
ASSUME(0, (2 and 1) == 1);

ASSUME(0, (0 || 0) == 0);
ASSUME(0, (1 || 0) == 1);
ASSUME(0, (2 || 0) == 1);
ASSUME(0, (0 || 1) == 1);
ASSUME(0, (0 || 2) == 1);
ASSUME(0, (1 || 1) == 1);
ASSUME(0, (2 || 2) == 1);
ASSUME(0, (0 or 1) == 1);
ASSUME(0, (0 or 0) == 0);


// intvec

intvec v0;
intvec v = 1, 2, 3;
intvec v2 = 1..3;
intvec v3 = 3..1;
intvec v4 = 3..3;

ASSUME(0, size(v0) == 1);
// ASSUME(0, v0 == 0);
ASSUME(0, v0[1] == 0);

ASSUME(0, v == v);
ASSUME(0, v == intvec(1, 2, 3));
ASSUME(0, intvec(1, 2, 3) == v);
ASSUME(0, v != intvec(1, 2));
ASSUME(0, v != intvec(1, 2, 4));

ASSUME(0, v2 == intvec(1, 2, 3));
ASSUME(0, v2 == 1..3);
ASSUME(0, v3 == intvec(3, 2, 1));
ASSUME(0, v4 == intvec(3));
ASSUME(0, size(v4) == 1);

ASSUME(0, v0 + 1 == 1 + v0);
ASSUME(0, v0 + 1 == intvec(1));
ASSUME(0, v + 1 == 1 + v);
ASSUME(0, v + 1 == intvec(2, 3, 4));

intvec w = 1:3;

ASSUME(0, size(w) == 3);
ASSUME(0, w == intvec(1, 1, 1));
ASSUME(0, size(1:0) == 0);


// intmat

intmat m[2][2] = 1, 2, 3, 4;
