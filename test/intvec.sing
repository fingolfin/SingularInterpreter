intvec v0;
intvec v = 1, 2, 3;
intvec v2 = 1..3;
intvec v3 = 3..1;
intvec v4 = 3..3;

ASSUME(0, size(v0) == 1);
// ASSUME(0, v0 == 0);
ASSUME(0, v0[1] == 0);

ASSUME(0, v == v);
ASSUME(0, v == intvec(1, 2, 3));
ASSUME(0, intvec(1, 2, 3) == v);
ASSUME(0, v != intvec(1, 2));
ASSUME(0, v != intvec(1, 2, 4));

ASSUME(0, v2 == intvec(1, 2, 3));
ASSUME(0, v2 == 1..3);
ASSUME(0, v3 == intvec(3, 2, 1));
ASSUME(0, v4 == intvec(3));
ASSUME(0, size(v4) == 1);

ASSUME(0, v0 + 1 == 1 + v0);
ASSUME(0, v0 + 1 == intvec(1));
ASSUME(0, v + 1 == 1 + v);
ASSUME(0, v + 1 == intvec(2, 3, 4));

intvec w = 1:3;

ASSUME(0, size(w) == 3);
ASSUME(0, w == intvec(1, 1, 1));
ASSUME(0, size(1:0) == 0);

ASSUME(0, -v == intvec(-1, -2, -3));
ASSUME(0, -intvec(-1, 3, -2) == intvec(1, -3, 2));
ASSUME(0, -intvec(9) == intvec(-9));

ASSUME(0, v - v == intvec(0, 0, 0));
ASSUME(0, v - intvec(1, 2, 3) == 0:3);
ASSUME(0, intvec(1, 2) - intvec(3, 4, 5) == intvec(-2, -2, -5));

ASSUME(0, v - 1 == intvec(0, 1, 2));

// the following operation, `1-v`, is under-specified, it depends on whether
// currRing is defined (in which case it converts arguments to `matrix`, and fails
// if they don't have the same dimension) or not (in which case 1 is converted
// to `intvec`;
// TODO: update this test to the "correct" (truthful to Singular)
// behavior when the mechanism is implemented

ASSUME(0, 1 - v == intvec(0, -2, -3)); // TODO: is this a bug (to report) in Singular?
