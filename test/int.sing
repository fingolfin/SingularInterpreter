int i = 1;

ASSUME(0, i == 1);
ASSUME(0, 1 == i);
ASSUME(0, i != 2);
ASSUME(0, 2 != i);

ASSUME(0, !0 == 1);
ASSUME(0, !1 == 0);
ASSUME(0, !2 == 0);
ASSUME(0, ! 0 == 1);
ASSUME(0, ! 1 == 0);
ASSUME(0, ! 2 == 0);
ASSUME(0, not 0 == 1);
ASSUME(0, not 1 == 0);
ASSUME(0, not 2 == 0);

ASSUME(0, (0 && 0) == 0);
ASSUME(0, (1 && 0) == 0);
ASSUME(0, (2 && 0) == 0);
ASSUME(0, (0 && 1) == 0);
ASSUME(0, (0 && 2) == 0);
ASSUME(0, (1 && 1) == 1);
ASSUME(0, (2 && 2) == 1);
ASSUME(0, (0 and 1) == 0);
ASSUME(0, (2 and 1) == 1);

ASSUME(0, (0 || 0) == 0);
ASSUME(0, (1 || 0) == 1);
ASSUME(0, (2 || 0) == 1);
ASSUME(0, (0 || 1) == 1);
ASSUME(0, (0 || 2) == 1);
ASSUME(0, (1 || 1) == 1);
ASSUME(0, (2 || 2) == 1);
ASSUME(0, (0 or 1) == 1);
ASSUME(0, (0 or 0) == 0);

i = 1;
i++;
ASSUME(0, i == 2);
i++;
ASSUME(0, i == 3);
i--;
ASSUME(0, i == 2);

ASSUME(0, !defined(f));
ASSUME(0, !defined(j));
proc f(int b)
{
    int i;
    if (b)
    {
        int j;
        i = j;
    }
    j++;
    return(i + j);
}
ASSUME(0, f(1) == 1);
ASSUME(0, !defined(j));
int j = 2;
ASSUME(0, f(1) == 1);
ASSUME(0, j == 2);
ASSUME(0, f(0) == 3);
ASSUME(0, j == 3);
ASSUME(0, f(0) == 4);
ASSUME(0, j == 4);
